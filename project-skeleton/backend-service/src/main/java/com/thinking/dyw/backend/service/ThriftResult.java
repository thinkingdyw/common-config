/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thinking.dyw.backend.service;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-11-5")
public class ThriftResult implements org.apache.thrift.TBase<ThriftResult, ThriftResult._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftResult");

  private static final org.apache.thrift.protocol.TField CAR_BRAND_FIELD_DESC = new org.apache.thrift.protocol.TField("carBrand", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CAR_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("carModel", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CAR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("carType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CAR_BRAND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("carBrandId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField CAR_MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("carModelId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField CAR_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("carTypeId", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftResultTupleSchemeFactory());
  }

  public String carBrand; // optional
  public String carModel; // optional
  public String carType; // optional
  public long carBrandId; // required
  public long carModelId; // required
  public long carTypeId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CAR_BRAND((short)1, "carBrand"),
    CAR_MODEL((short)2, "carModel"),
    CAR_TYPE((short)3, "carType"),
    CAR_BRAND_ID((short)4, "carBrandId"),
    CAR_MODEL_ID((short)5, "carModelId"),
    CAR_TYPE_ID((short)6, "carTypeId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CAR_BRAND
          return CAR_BRAND;
        case 2: // CAR_MODEL
          return CAR_MODEL;
        case 3: // CAR_TYPE
          return CAR_TYPE;
        case 4: // CAR_BRAND_ID
          return CAR_BRAND_ID;
        case 5: // CAR_MODEL_ID
          return CAR_MODEL_ID;
        case 6: // CAR_TYPE_ID
          return CAR_TYPE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CARBRANDID_ISSET_ID = 0;
  private static final int __CARMODELID_ISSET_ID = 1;
  private static final int __CARTYPEID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CAR_BRAND,_Fields.CAR_MODEL,_Fields.CAR_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CAR_BRAND, new org.apache.thrift.meta_data.FieldMetaData("carBrand", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAR_MODEL, new org.apache.thrift.meta_data.FieldMetaData("carModel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("carType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAR_BRAND_ID, new org.apache.thrift.meta_data.FieldMetaData("carBrandId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CAR_MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("carModelId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CAR_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("carTypeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftResult.class, metaDataMap);
  }

  public ThriftResult() {
  }

  public ThriftResult(
    long carBrandId,
    long carModelId,
    long carTypeId)
  {
    this();
    this.carBrandId = carBrandId;
    setCarBrandIdIsSet(true);
    this.carModelId = carModelId;
    setCarModelIdIsSet(true);
    this.carTypeId = carTypeId;
    setCarTypeIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftResult(ThriftResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCarBrand()) {
      this.carBrand = other.carBrand;
    }
    if (other.isSetCarModel()) {
      this.carModel = other.carModel;
    }
    if (other.isSetCarType()) {
      this.carType = other.carType;
    }
    this.carBrandId = other.carBrandId;
    this.carModelId = other.carModelId;
    this.carTypeId = other.carTypeId;
  }

  public ThriftResult deepCopy() {
    return new ThriftResult(this);
  }

  @Override
  public void clear() {
    this.carBrand = null;
    this.carModel = null;
    this.carType = null;
    setCarBrandIdIsSet(false);
    this.carBrandId = 0;
    setCarModelIdIsSet(false);
    this.carModelId = 0;
    setCarTypeIdIsSet(false);
    this.carTypeId = 0;
  }

  public String getCarBrand() {
    return this.carBrand;
  }

  public ThriftResult setCarBrand(String carBrand) {
    this.carBrand = carBrand;
    return this;
  }

  public void unsetCarBrand() {
    this.carBrand = null;
  }

  /** Returns true if field carBrand is set (has been assigned a value) and false otherwise */
  public boolean isSetCarBrand() {
    return this.carBrand != null;
  }

  public void setCarBrandIsSet(boolean value) {
    if (!value) {
      this.carBrand = null;
    }
  }

  public String getCarModel() {
    return this.carModel;
  }

  public ThriftResult setCarModel(String carModel) {
    this.carModel = carModel;
    return this;
  }

  public void unsetCarModel() {
    this.carModel = null;
  }

  /** Returns true if field carModel is set (has been assigned a value) and false otherwise */
  public boolean isSetCarModel() {
    return this.carModel != null;
  }

  public void setCarModelIsSet(boolean value) {
    if (!value) {
      this.carModel = null;
    }
  }

  public String getCarType() {
    return this.carType;
  }

  public ThriftResult setCarType(String carType) {
    this.carType = carType;
    return this;
  }

  public void unsetCarType() {
    this.carType = null;
  }

  /** Returns true if field carType is set (has been assigned a value) and false otherwise */
  public boolean isSetCarType() {
    return this.carType != null;
  }

  public void setCarTypeIsSet(boolean value) {
    if (!value) {
      this.carType = null;
    }
  }

  public long getCarBrandId() {
    return this.carBrandId;
  }

  public ThriftResult setCarBrandId(long carBrandId) {
    this.carBrandId = carBrandId;
    setCarBrandIdIsSet(true);
    return this;
  }

  public void unsetCarBrandId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CARBRANDID_ISSET_ID);
  }

  /** Returns true if field carBrandId is set (has been assigned a value) and false otherwise */
  public boolean isSetCarBrandId() {
    return EncodingUtils.testBit(__isset_bitfield, __CARBRANDID_ISSET_ID);
  }

  public void setCarBrandIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CARBRANDID_ISSET_ID, value);
  }

  public long getCarModelId() {
    return this.carModelId;
  }

  public ThriftResult setCarModelId(long carModelId) {
    this.carModelId = carModelId;
    setCarModelIdIsSet(true);
    return this;
  }

  public void unsetCarModelId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CARMODELID_ISSET_ID);
  }

  /** Returns true if field carModelId is set (has been assigned a value) and false otherwise */
  public boolean isSetCarModelId() {
    return EncodingUtils.testBit(__isset_bitfield, __CARMODELID_ISSET_ID);
  }

  public void setCarModelIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CARMODELID_ISSET_ID, value);
  }

  public long getCarTypeId() {
    return this.carTypeId;
  }

  public ThriftResult setCarTypeId(long carTypeId) {
    this.carTypeId = carTypeId;
    setCarTypeIdIsSet(true);
    return this;
  }

  public void unsetCarTypeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CARTYPEID_ISSET_ID);
  }

  /** Returns true if field carTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetCarTypeId() {
    return EncodingUtils.testBit(__isset_bitfield, __CARTYPEID_ISSET_ID);
  }

  public void setCarTypeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CARTYPEID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CAR_BRAND:
      if (value == null) {
        unsetCarBrand();
      } else {
        setCarBrand((String)value);
      }
      break;

    case CAR_MODEL:
      if (value == null) {
        unsetCarModel();
      } else {
        setCarModel((String)value);
      }
      break;

    case CAR_TYPE:
      if (value == null) {
        unsetCarType();
      } else {
        setCarType((String)value);
      }
      break;

    case CAR_BRAND_ID:
      if (value == null) {
        unsetCarBrandId();
      } else {
        setCarBrandId((Long)value);
      }
      break;

    case CAR_MODEL_ID:
      if (value == null) {
        unsetCarModelId();
      } else {
        setCarModelId((Long)value);
      }
      break;

    case CAR_TYPE_ID:
      if (value == null) {
        unsetCarTypeId();
      } else {
        setCarTypeId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CAR_BRAND:
      return getCarBrand();

    case CAR_MODEL:
      return getCarModel();

    case CAR_TYPE:
      return getCarType();

    case CAR_BRAND_ID:
      return Long.valueOf(getCarBrandId());

    case CAR_MODEL_ID:
      return Long.valueOf(getCarModelId());

    case CAR_TYPE_ID:
      return Long.valueOf(getCarTypeId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CAR_BRAND:
      return isSetCarBrand();
    case CAR_MODEL:
      return isSetCarModel();
    case CAR_TYPE:
      return isSetCarType();
    case CAR_BRAND_ID:
      return isSetCarBrandId();
    case CAR_MODEL_ID:
      return isSetCarModelId();
    case CAR_TYPE_ID:
      return isSetCarTypeId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftResult)
      return this.equals((ThriftResult)that);
    return false;
  }

  public boolean equals(ThriftResult that) {
    if (that == null)
      return false;

    boolean this_present_carBrand = true && this.isSetCarBrand();
    boolean that_present_carBrand = true && that.isSetCarBrand();
    if (this_present_carBrand || that_present_carBrand) {
      if (!(this_present_carBrand && that_present_carBrand))
        return false;
      if (!this.carBrand.equals(that.carBrand))
        return false;
    }

    boolean this_present_carModel = true && this.isSetCarModel();
    boolean that_present_carModel = true && that.isSetCarModel();
    if (this_present_carModel || that_present_carModel) {
      if (!(this_present_carModel && that_present_carModel))
        return false;
      if (!this.carModel.equals(that.carModel))
        return false;
    }

    boolean this_present_carType = true && this.isSetCarType();
    boolean that_present_carType = true && that.isSetCarType();
    if (this_present_carType || that_present_carType) {
      if (!(this_present_carType && that_present_carType))
        return false;
      if (!this.carType.equals(that.carType))
        return false;
    }

    boolean this_present_carBrandId = true;
    boolean that_present_carBrandId = true;
    if (this_present_carBrandId || that_present_carBrandId) {
      if (!(this_present_carBrandId && that_present_carBrandId))
        return false;
      if (this.carBrandId != that.carBrandId)
        return false;
    }

    boolean this_present_carModelId = true;
    boolean that_present_carModelId = true;
    if (this_present_carModelId || that_present_carModelId) {
      if (!(this_present_carModelId && that_present_carModelId))
        return false;
      if (this.carModelId != that.carModelId)
        return false;
    }

    boolean this_present_carTypeId = true;
    boolean that_present_carTypeId = true;
    if (this_present_carTypeId || that_present_carTypeId) {
      if (!(this_present_carTypeId && that_present_carTypeId))
        return false;
      if (this.carTypeId != that.carTypeId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_carBrand = true && (isSetCarBrand());
    list.add(present_carBrand);
    if (present_carBrand)
      list.add(carBrand);

    boolean present_carModel = true && (isSetCarModel());
    list.add(present_carModel);
    if (present_carModel)
      list.add(carModel);

    boolean present_carType = true && (isSetCarType());
    list.add(present_carType);
    if (present_carType)
      list.add(carType);

    boolean present_carBrandId = true;
    list.add(present_carBrandId);
    if (present_carBrandId)
      list.add(carBrandId);

    boolean present_carModelId = true;
    list.add(present_carModelId);
    if (present_carModelId)
      list.add(carModelId);

    boolean present_carTypeId = true;
    list.add(present_carTypeId);
    if (present_carTypeId)
      list.add(carTypeId);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCarBrand()).compareTo(other.isSetCarBrand());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarBrand()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carBrand, other.carBrand);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarModel()).compareTo(other.isSetCarModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carModel, other.carModel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarType()).compareTo(other.isSetCarType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carType, other.carType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarBrandId()).compareTo(other.isSetCarBrandId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarBrandId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carBrandId, other.carBrandId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarModelId()).compareTo(other.isSetCarModelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarModelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carModelId, other.carModelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarTypeId()).compareTo(other.isSetCarTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carTypeId, other.carTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftResult(");
    boolean first = true;

    if (isSetCarBrand()) {
      sb.append("carBrand:");
      if (this.carBrand == null) {
        sb.append("null");
      } else {
        sb.append(this.carBrand);
      }
      first = false;
    }
    if (isSetCarModel()) {
      if (!first) sb.append(", ");
      sb.append("carModel:");
      if (this.carModel == null) {
        sb.append("null");
      } else {
        sb.append(this.carModel);
      }
      first = false;
    }
    if (isSetCarType()) {
      if (!first) sb.append(", ");
      sb.append("carType:");
      if (this.carType == null) {
        sb.append("null");
      } else {
        sb.append(this.carType);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("carBrandId:");
    sb.append(this.carBrandId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("carModelId:");
    sb.append(this.carModelId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("carTypeId:");
    sb.append(this.carTypeId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'carBrandId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'carModelId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'carTypeId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftResultStandardSchemeFactory implements SchemeFactory {
    public ThriftResultStandardScheme getScheme() {
      return new ThriftResultStandardScheme();
    }
  }

  private static class ThriftResultStandardScheme extends StandardScheme<ThriftResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CAR_BRAND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.carBrand = iprot.readString();
              struct.setCarBrandIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CAR_MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.carModel = iprot.readString();
              struct.setCarModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CAR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.carType = iprot.readString();
              struct.setCarTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CAR_BRAND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.carBrandId = iprot.readI64();
              struct.setCarBrandIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CAR_MODEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.carModelId = iprot.readI64();
              struct.setCarModelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CAR_TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.carTypeId = iprot.readI64();
              struct.setCarTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCarBrandId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'carBrandId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCarModelId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'carModelId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCarTypeId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'carTypeId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.carBrand != null) {
        if (struct.isSetCarBrand()) {
          oprot.writeFieldBegin(CAR_BRAND_FIELD_DESC);
          oprot.writeString(struct.carBrand);
          oprot.writeFieldEnd();
        }
      }
      if (struct.carModel != null) {
        if (struct.isSetCarModel()) {
          oprot.writeFieldBegin(CAR_MODEL_FIELD_DESC);
          oprot.writeString(struct.carModel);
          oprot.writeFieldEnd();
        }
      }
      if (struct.carType != null) {
        if (struct.isSetCarType()) {
          oprot.writeFieldBegin(CAR_TYPE_FIELD_DESC);
          oprot.writeString(struct.carType);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(CAR_BRAND_ID_FIELD_DESC);
      oprot.writeI64(struct.carBrandId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAR_MODEL_ID_FIELD_DESC);
      oprot.writeI64(struct.carModelId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAR_TYPE_ID_FIELD_DESC);
      oprot.writeI64(struct.carTypeId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftResultTupleSchemeFactory implements SchemeFactory {
    public ThriftResultTupleScheme getScheme() {
      return new ThriftResultTupleScheme();
    }
  }

  private static class ThriftResultTupleScheme extends TupleScheme<ThriftResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.carBrandId);
      oprot.writeI64(struct.carModelId);
      oprot.writeI64(struct.carTypeId);
      BitSet optionals = new BitSet();
      if (struct.isSetCarBrand()) {
        optionals.set(0);
      }
      if (struct.isSetCarModel()) {
        optionals.set(1);
      }
      if (struct.isSetCarType()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCarBrand()) {
        oprot.writeString(struct.carBrand);
      }
      if (struct.isSetCarModel()) {
        oprot.writeString(struct.carModel);
      }
      if (struct.isSetCarType()) {
        oprot.writeString(struct.carType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.carBrandId = iprot.readI64();
      struct.setCarBrandIdIsSet(true);
      struct.carModelId = iprot.readI64();
      struct.setCarModelIdIsSet(true);
      struct.carTypeId = iprot.readI64();
      struct.setCarTypeIdIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.carBrand = iprot.readString();
        struct.setCarBrandIsSet(true);
      }
      if (incoming.get(1)) {
        struct.carModel = iprot.readString();
        struct.setCarModelIsSet(true);
      }
      if (incoming.get(2)) {
        struct.carType = iprot.readString();
        struct.setCarTypeIsSet(true);
      }
    }
  }

}

